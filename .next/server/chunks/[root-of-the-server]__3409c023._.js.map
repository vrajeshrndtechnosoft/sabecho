{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Keval/VrajeshRndTechnosoft/sabecho-v2/models/home/Services.ts"],"sourcesContent":["import mongoose, { Document, Schema } from 'mongoose';\r\n\r\n// TypeScript interface (without redefining `_id`)\r\ninterface WhyServices {\r\n  _id?: string;\r\n  userType?: string;\r\n  image: string;\r\n  imageAlt: string;\r\n  title: string;\r\n  description: string;\r\n  metaTitle?: string;\r\n  metaDescription?: string;\r\n  keywords: string[];\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\n// Extend Document, and explicitly type _id if needed\r\ninterface WhyServicesDocument extends Document {\r\n  _id: string; // or `string` if you're using custom string IDs\r\n  userType?: string;\r\n  image: string;\r\n  imageAlt: string;\r\n  title: string;\r\n  description: string;\r\n  metaTitle?: string;\r\n  metaDescription?: string;\r\n  keywords: string[];\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\nconst whyServicesSchema = new Schema<WhyServicesDocument>(\r\n  {\r\n    _id: {\r\n      type: String, // You can keep this if you're using custom string IDs\r\n      required: false,\r\n    },\r\n    userType: {\r\n      type: String,\r\n      required: false,\r\n    },\r\n    image: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    imageAlt: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    title: {\r\n      type: String,\r\n      required: true,\r\n      trim: true,\r\n    },\r\n    description: {\r\n      type: String,\r\n      required: true,\r\n      trim: true,\r\n    },\r\n    metaTitle: {\r\n      type: String,\r\n      trim: true,\r\n    },\r\n    metaDescription: {\r\n      type: String,\r\n      trim: true,\r\n    },\r\n    keywords: [\r\n      {\r\n        type: String,\r\n        trim: true,\r\n      },\r\n    ],\r\n  },\r\n  { timestamps: true },\r\n);\r\n\r\nconst WhyServices = mongoose.models.WhyServices || mongoose.model<WhyServicesDocument>('WhyServices', whyServicesSchema);\r\n\r\nexport default WhyServices;"],"names":[],"mappings":";;;AAAA;;AAgCA,MAAM,oBAAoB,IAAI,yGAAA,CAAA,SAAM,CAClC;IACE,KAAK;QACH,MAAM;QACN,UAAU;IACZ;IACA,UAAU;QACR,MAAM;QACN,UAAU;IACZ;IACA,OAAO;QACL,MAAM;QACN,UAAU;IACZ;IACA,UAAU;QACR,MAAM;QACN,UAAU;IACZ;IACA,OAAO;QACL,MAAM;QACN,UAAU;QACV,MAAM;IACR;IACA,aAAa;QACX,MAAM;QACN,UAAU;QACV,MAAM;IACR;IACA,WAAW;QACT,MAAM;QACN,MAAM;IACR;IACA,iBAAiB;QACf,MAAM;QACN,MAAM;IACR;IACA,UAAU;QACR;YACE,MAAM;YACN,MAAM;QACR;KACD;AACH,GACA;IAAE,YAAY;AAAK;AAGrB,MAAM,cAAc,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,WAAW,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAsB,eAAe;uCAEvF","debugId":null}},
    {"offset": {"line": 125, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Keval/VrajeshRndTechnosoft/sabecho-v2/lib/db.ts"],"sourcesContent":["import mongoose, { ConnectOptions } from \"mongoose\";\r\n\r\nconst options: ConnectOptions = {\r\n  serverSelectionTimeoutMS: 5000,\r\n  connectTimeoutMS: 10000,\r\n  socketTimeoutMS: 45000,\r\n  retryWrites: true,\r\n};\r\n\r\n// Keep track of the connection status\r\nlet isConnected = false;\r\n\r\nconst connectDb = async (): Promise<void> => {\r\n  if (isConnected) {\r\n    // Already connected\r\n    return;\r\n  }\r\n\r\n  try {\r\n    await mongoose.connect(process.env.MONGODB_URI as string, options);\r\n    isConnected = true;\r\n    console.log(\"Connected to MongoDB\");\r\n  } catch (err) {\r\n    console.log(`DB connection error - ${err}`);\r\n    throw err;\r\n  }\r\n};\r\n\r\nconst closeDbConnection = async (): Promise<void> => {\r\n  try {\r\n    await mongoose.connection.close();\r\n    isConnected = false;\r\n    console.log(\"MongoDB connection closed\");\r\n  } catch (err) {\r\n    console.error(err);\r\n  }\r\n};\r\n\r\nexport { connectDb, closeDbConnection };\r\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,UAA0B;IAC9B,0BAA0B;IAC1B,kBAAkB;IAClB,iBAAiB;IACjB,aAAa;AACf;AAEA,sCAAsC;AACtC,IAAI,cAAc;AAElB,MAAM,YAAY;IAChB,IAAI,aAAa;QACf,oBAAoB;QACpB;IACF;IAEA,IAAI;QACF,MAAM,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAC,WAAW,EAAY;QAC1D,cAAc;QACd,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,KAAK;QACZ,QAAQ,GAAG,CAAC,CAAC,sBAAsB,EAAE,KAAK;QAC1C,MAAM;IACR;AACF;AAEA,MAAM,oBAAoB;IACxB,IAAI;QACF,MAAM,yGAAA,CAAA,UAAQ,CAAC,UAAU,CAAC,KAAK;QAC/B,cAAc;QACd,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC;IAChB;AACF","debugId":null}},
    {"offset": {"line": 169, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Keval/VrajeshRndTechnosoft/sabecho-v2/app/api/v1/why-services/route.ts"],"sourcesContent":["// File: app/api/why-choose/route.ts\r\n\r\nimport { NextResponse } from \"next/server\";\r\nimport WhyServices from \"@/models/home/Services\";\r\nimport { connectDb } from '@/lib/db';\r\n\r\nexport async function GET() {\r\n  try {\r\n    await connectDb();\r\n    const services = await WhyServices.find();\r\n    return NextResponse.json(services);\r\n  } catch (error) {\r\n    return NextResponse.json(\r\n      { message: (error as Error).message },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}"],"names":[],"mappings":"AAAA,oCAAoC;;;;AAEpC;AACA;AACA;;;;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,CAAA,GAAA,2GAAA,CAAA,YAAS,AAAD;QACd,MAAM,WAAW,MAAM,4HAAA,CAAA,UAAW,CAAC,IAAI;QACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS,AAAC,MAAgB,OAAO;QAAC,GACpC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}