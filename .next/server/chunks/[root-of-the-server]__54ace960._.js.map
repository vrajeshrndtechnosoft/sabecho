{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Keval/VrajeshRndTechnosoft/sabecho-v2/lib/db.ts"],"sourcesContent":["import mongoose, { ConnectOptions } from \"mongoose\";\r\n\r\nconst options: ConnectOptions = {\r\n  serverSelectionTimeoutMS: 5000,\r\n  connectTimeoutMS: 10000,\r\n  socketTimeoutMS: 45000,\r\n  retryWrites: true,\r\n};\r\n\r\n// Keep track of the connection status\r\nlet isConnected = false;\r\n\r\nconst connectDb = async (): Promise<void> => {\r\n  if (isConnected) {\r\n    // Already connected\r\n    return;\r\n  }\r\n\r\n  try {\r\n    await mongoose.connect(process.env.MONGODB_URI as string, options);\r\n    isConnected = true;\r\n    console.log(\"Connected to MongoDB\");\r\n  } catch (err) {\r\n    console.log(`DB connection error - ${err}`);\r\n    throw err;\r\n  }\r\n};\r\n\r\nconst closeDbConnection = async (): Promise<void> => {\r\n  try {\r\n    await mongoose.connection.close();\r\n    isConnected = false;\r\n    console.log(\"MongoDB connection closed\");\r\n  } catch (err) {\r\n    console.error(err);\r\n  }\r\n};\r\n\r\nexport { connectDb, closeDbConnection };\r\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,UAA0B;IAC9B,0BAA0B;IAC1B,kBAAkB;IAClB,iBAAiB;IACjB,aAAa;AACf;AAEA,sCAAsC;AACtC,IAAI,cAAc;AAElB,MAAM,YAAY;IAChB,IAAI,aAAa;QACf,oBAAoB;QACpB;IACF;IAEA,IAAI;QACF,MAAM,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAC,WAAW,EAAY;QAC1D,cAAc;QACd,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,KAAK;QACZ,QAAQ,GAAG,CAAC,CAAC,sBAAsB,EAAE,KAAK;QAC1C,MAAM;IACR;AACF;AAEA,MAAM,oBAAoB;IACxB,IAAI;QACF,MAAM,yGAAA,CAAA,UAAQ,CAAC,UAAU,CAAC,KAAK;QAC/B,cAAc;QACd,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC;IAChB;AACF","debugId":null}},
    {"offset": {"line": 112, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Keval/VrajeshRndTechnosoft/sabecho-v2/models/Category.ts"],"sourcesContent":["// models/Category.ts\r\nimport mongoose, { Schema, Document, Model } from \"mongoose\";\r\n\r\n/* -------------------- INTERFACES -------------------- */\r\nexport interface IProduct {\r\n  p_name: string;\r\n  location: string;\r\n  city: string;\r\n  brand?: string;\r\n}\r\n\r\nexport interface ISubCategory {\r\n  id: number;\r\n  name: string;\r\n  slug?: string;\r\n  metaTitle?: string;\r\n  metaDescription?: string;\r\n  keywords?: string[];\r\n  product?: IProduct[];\r\n}\r\n\r\nexport interface ICategory extends Document {\r\n  id: number;\r\n  category: string;\r\n  slug?: string;\r\n  metaTitle?: string;\r\n  metaDescription?: string;\r\n  keywords?: string[];\r\n  subCategory: ISubCategory[];\r\n  createdAt?: Date;\r\n  updatedAt?: Date;\r\n}\r\n\r\n/* -------------------- COUNTER SCHEMA -------------------- */\r\nexport interface ICounter extends Document {\r\n  _id: string;\r\n  sequence_value: number;\r\n}\r\n\r\nconst counterSchema = new Schema<ICounter>({\r\n  _id: { type: String, required: true },\r\n  sequence_value: { type: Number, required: true },\r\n});\r\n\r\nconst Counter: Model<ICounter> = mongoose.models.Counter || mongoose.model<ICounter>(\"Counter\", counterSchema);\r\n\r\n/* -------------------- SUBCATEGORY SCHEMA -------------------- */\r\nconst subCategorySchema = new Schema<ISubCategory>({\r\n  id: { type: Number },\r\n  name: { type: String },\r\n  slug: { type: String },\r\n  metaTitle: { type: String },\r\n  metaDescription: { type: String },\r\n  keywords: [{ type: String }],\r\n  product: [{\r\n    p_name: { type: String },\r\n    location: { type: String },\r\n    city: { type: String },\r\n    brand: { type: String, default: \"\" },\r\n  }],\r\n});\r\n\r\n/* -------------------- CATEGORY SCHEMA -------------------- */\r\nconst categorySchema = new Schema<ICategory>({\r\n  id: { type: Number, unique: true },\r\n  category: { type: String, required: true, unique: true },\r\n  slug: { type: String },\r\n  metaTitle: { type: String },\r\n  metaDescription: { type: String },\r\n  keywords: [{ type: String }],\r\n  subCategory: [subCategorySchema],\r\n}, { timestamps: true });\r\n\r\n/* -------------------- AUTO INCREMENT LOGIC -------------------- */\r\nasync function getNextSequenceValue(sequenceName: string): Promise<number> {\r\n  const sequenceDocument = await Counter.findByIdAndUpdate(\r\n    sequenceName,\r\n    { $inc: { sequence_value: 1 } },\r\n    { new: true, upsert: true }\r\n  );\r\n  return sequenceDocument!.sequence_value;\r\n}\r\n\r\nasync function getNextSubCategoryId(categoryId: number): Promise<number> {\r\n  const sequenceName = `subCategoryId_${categoryId}`;\r\n  const sequenceDocument = await Counter.findByIdAndUpdate(\r\n    sequenceName,\r\n    { $inc: { sequence_value: 1 } },\r\n    { new: true, upsert: true }\r\n  );\r\n  return sequenceDocument!.sequence_value;\r\n}\r\n\r\n/* -------------------- PRE SAVE MIDDLEWARE -------------------- */\r\ncategorySchema.pre<ICategory>(\"save\", async function (next) {\r\n  if (this.isNew) {\r\n    this.id = await getNextSequenceValue(\"categoryId\");\r\n  }\r\n\r\n  if (!this.slug) {\r\n    this.slug = this.category.toLowerCase().replace(/[^a-z0-9]+/g, \"-\");\r\n  }\r\n\r\n  for (const subCategory of this.subCategory) {\r\n    if (!subCategory.id) {\r\n      subCategory.id = await getNextSubCategoryId(this.id);\r\n    }\r\n    if (!subCategory.slug && subCategory.name) {\r\n      subCategory.slug = subCategory.name.toLowerCase().replace(/[^a-z0-9]+/g, \"-\");\r\n    }\r\n  }\r\n\r\n  next();\r\n});\r\n\r\n/* -------------------- DELETE MIDDLEWARE -------------------- */\r\ncategorySchema.pre(\"deleteOne\", { document: true, query: false }, async function (next: (err?: Error) => void) {\r\n  try {\r\n    const category = this as ICategory;\r\n\r\n    const CategoryModel = mongoose.model<ICategory>(\"Category\");\r\n\r\n    for (const subCategory of category.subCategory) {\r\n      // Only delete subCategory if it exists by _id (assuming `subCategory.id` is just a number and not ObjectId)\r\n      await CategoryModel.findOneAndDelete({ id: subCategory.id });\r\n    }\r\n\r\n    next();\r\n  } catch (error) {\r\n    next(error as Error);\r\n  }\r\n});\r\n\r\n/* -------------------- MODEL EXPORT -------------------- */\r\nconst Category: Model<ICategory> = mongoose.models.Category || mongoose.model<ICategory>(\"Category\", categorySchema);\r\n\r\nexport { Category, Counter };\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 265, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Keval/VrajeshRndTechnosoft/sabecho-v2/app/api/v1/categories/all/route.ts"],"sourcesContent":["// File: app/api/categories/all/route.ts\r\n\r\nimport { NextResponse } from 'next/server';\r\nimport {connectDb} from '@/lib/db';\r\nimport {Category} from '@/models/Category';\r\n\r\nexport async function GET() {\r\n  try {\r\n    await connectDb();\r\n    const categories = await Category.find();\r\n    return NextResponse.json(categories, { status: 200 });\r\n  } catch (error) {\r\n    console.error(error);\r\n    return NextResponse.json({ message: 'Internal Server Error' }, { status: 500 });\r\n  }\r\n}"],"names":[],"mappings":"AAAA,wCAAwC;;;;AAExC;AACA;AACA;;;;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,CAAA,GAAA,2GAAA,CAAA,YAAS,AAAD;QACd,MAAM,aAAa,MAAM,oHAAA,CAAA,WAAQ,CAAC,IAAI;QACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,YAAY;YAAE,QAAQ;QAAI;IACrD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC/E;AACF","debugId":null}}]
}